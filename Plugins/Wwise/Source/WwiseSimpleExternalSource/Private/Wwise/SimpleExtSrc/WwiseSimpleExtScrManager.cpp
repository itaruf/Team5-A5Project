/*******************************************************************************
The content of the files in this repository include portions of the
AUDIOKINETIC Wwise Technology released in source code form as part of the SDK
package.

Commercial License Usage

Licensees holding valid commercial licenses to the AUDIOKINETIC Wwise Technology
may use these files in accordance with the end user license agreement provided
with the software or, alternatively, in accordance with the terms contained in a
written agreement between you and Audiokinetic Inc.

Copyright (c) 2022 Audiokinetic Inc.
*******************************************************************************/

#include "Wwise/SimpleExtSrc/WwiseSimpleExtSrcManager.h"
#include "Wwise/SimpleExtSrc/WwiseExternalSourceCookieDefaultMedia.h"
#include "Wwise/SimpleExtSrc/WwiseExternalSourceSettings.h"
#include "Wwise/SimpleExtSrc/WwiseExternalSourceMediaInfo.h"

#include "Wwise/LowLevel/WwiseLowLevelSoundEngine.h"
#include "Wwise/Stats/SimpleExtSrc.h"
#include "Wwise/WwiseExternalSourceFileState.h"
#include "Wwise/WwiseSharedLanguageId.h"
#include "Wwise/WwiseSharedPlatformId.h"
#include "Wwise/WwiseResourceLoader.h"

#include "Engine/StreamableManager.h"
#include "Misc/FileHelper.h"
#include "Platforms/AkPlatformInfo.h"
#include "UObject/UObjectIterator.h"

#include "AkAudioEvent.h"

#include <inttypes.h>

#if WITH_EDITORONLY_DATA
#include "Wwise/WwiseResourceCooker.h"
#include "Wwise/WwiseProjectDatabase.h"
#endif


void UWwiseSimpleExtSrcManager::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	auto ExtSettings = GetMutableDefault<UWwiseExternalSourceSettings>();
#if WITH_EDITOR
	// When these settings change we will want to reset the External source manager and reload all external sources
	ExtSettings->OnTablesChanged.AddUObject(this, &UWwiseSimpleExtSrcManager::OnTablesChanged);
#endif
	LoadMediaTables();
}

void UWwiseSimpleExtSrcManager::Deinitialize()
{
	Super::Deinitialize();
#if WITH_EDITOR
	UWwiseExternalSourceSettings* ExtSettings = GetMutableDefault<UWwiseExternalSourceSettings>();
	if (IsValid(ExtSettings))
	{
		if (ExtSettings->OnTablesChanged.IsBoundToObject(this))
		{
			ExtSettings->OnTablesChanged.RemoveAll(this);
		}
	}
#endif
}

void UWwiseSimpleExtSrcManager::LoadMediaTables()
{
	const auto ExtSettings = GetDefault<UWwiseExternalSourceSettings>();

	//This implementation of the WwiseExternalSourceManager uses data tables to keep track of all of the external source media in the project.
	//This table could be automatically generated by external scripts.
	//It would also be perfectly valid to use a different type of data structure or a handling class to retrieve external source media information.
	if (ExtSettings->MediaInfoTable.IsValid())
	{
		MediaInfoTable = TStrongObjectPtr<UDataTable>(Cast<UDataTable>(StreamableManager.LoadSynchronous(ExtSettings->MediaInfoTable)));
	}
	else
	{
		MediaInfoTable.Reset();
	}

	//The same goes for this (optional) table that sets the default media to be associated with each external source cookie
	if (ExtSettings->ExternalSourceDefaultMedia.IsValid())
	{
		ExternalSourceDefaultMedia = TStrongObjectPtr<UDataTable>(Cast<UDataTable>(StreamableManager.LoadSynchronous(ExtSettings->ExternalSourceDefaultMedia)));
	}
	else
	{
		ExternalSourceDefaultMedia.Reset();
	}

	if (MediaInfoTable.IsValid())
	{
		MediaInfoTable->OnDataTableChanged().AddUObject(this, &UWwiseSimpleExtSrcManager::OnMediaInfoTableChanged);
		FillMediaNameToIdMap(*MediaInfoTable.Get());
	}
	else
	{
		UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("Wwise Simple External Source: Media Info Table is not set. Please set table in the Project Settings."));
	}

	if (ExternalSourceDefaultMedia.IsValid())
	{
		ExternalSourceDefaultMedia->OnDataTableChanged().AddUObject(this, &UWwiseSimpleExtSrcManager::OnDefaultExternalSourceTableChanged);
		FillExternalSourceToMediaMap(*ExternalSourceDefaultMedia.Get());
	}
	else
	{
		UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("Wwise Simple External Source: External Source Default Media is not set. Please set table in the Project Settings."));
	}
}

void UWwiseSimpleExtSrcManager::ReloadExternalSources()
{
	UE_LOG(LogWwiseSimpleExtSrc, Log, TEXT("Wwise Simple External Source: Reloading events with external sources"));

	//Unload all events containing external source data
	TArray<UAkAudioEvent*> EventsToReload;
	for (TObjectIterator<UAkAudioEvent> EventAssetIt; EventAssetIt; ++EventAssetIt)
	{
		if (EventAssetIt->GetExternalSources().Num()>0)
		{
			EventAssetIt->UnloadData();
			EventsToReload.Add(*EventAssetIt);
		}
	}

	//Then reload them
	for (UAkAudioEvent* Event : EventsToReload)
	{
		Event->LoadData();
	}

	UE_LOG(LogWwiseSimpleExtSrc, Verbose, TEXT("Wwise Simple External Source: %d events reloaded"), EventsToReload.Num());
}

void UWwiseSimpleExtSrcManager::OnPostEvent(const uint32 InPlayingID,
	const TArray<AkExternalSourceInfo>& InExternalSources)
{
	if (InExternalSources.Num() == 0)
	{
		return;
	}

	TArray<uint32> Cookies;
	Cookies.Reserve(InExternalSources.Num());
	for (const auto& ExternalSource : InExternalSources)
	{
		Cookies.Add(ExternalSource.iExternalSrcCookie);
	}
	FileHandlerExecutionQueue.Async([this, InPlayingID, Cookies = MoveTemp(Cookies)]() mutable
	{
		for (const auto Cookie : Cookies)
		{
			uint32 MediaID = -1;
			if (const auto* MediaIDPtr = CookieToMediaId.Find(Cookie))
			{
				MediaID = *MediaIDPtr;
			}
			else
			{
				UE_LOG(LogWwiseSimpleExtSrc, Error, TEXT("OnPostEvent of %" PRIu32 ": Cookie not found"), Cookie);
				continue;
			}

			if (const auto* MediaPtr = FileStatesById.Find(MediaID))
			{
				if (auto* ExtMediaPtr = static_cast<FWwiseExternalSourceFileState*>(MediaPtr->Get()))
				{
					ExtMediaPtr->IncrementPlayCount();
				}
			}

			PlayingIdToMediaIds.AddUnique(InPlayingID, MediaID);
		}
	});
}

//Decrement play count on media file states
void UWwiseSimpleExtSrcManager::OnEndOfEvent(const uint32 InPlayingID)
{
	FileHandlerExecutionQueue.Async([this, InPlayingID]() mutable
	{
		if (!PlayingIdToMediaIds.Contains(InPlayingID))
		{
			return;
		}

		TArray<uint32> OutMediaIds;
		PlayingIdToMediaIds.MultiFind(InPlayingID, OutMediaIds);
		for (const auto MediaID : OutMediaIds)
		{
			if (const auto* MediaPtr = FileStatesById.Find(MediaID))
			{
				if (auto* ExtMediaPtr = static_cast<FWwiseExternalSourceFileState*>(MediaPtr->Get()))
				{
					ExtMediaPtr->DecrementPlayCount();
				}
			}
		}
		PlayingIdToMediaIds.Remove(InPlayingID);
	});
}

FString UWwiseSimpleExtSrcManager::GetStagingDirectory() const
{
	return UWwiseExternalSourceSettings::GetExternalSourceStagingDirectory();
}

void UWwiseSimpleExtSrcManager::SetExternalSourceMediaById(const FString& ExternalSourceName, const int32 MediaId)
{
	AkUInt32 Cookie = FAkAudioDevice::GetShortIDFromString(ExternalSourceName);
	SetExternalSourceMedia(Cookie, MediaId, ExternalSourceName);
}

void UWwiseSimpleExtSrcManager::SetExternalSourceMediaByName(const FString& ExternalSourceName, const FString& MediaName)
{
	AkUInt32 Cookie = FAkAudioDevice::GetShortIDFromString(ExternalSourceName);

	if (const uint32* MediaId = MediaNameToId.Find(MediaName))
	{
		SetExternalSourceMedia(Cookie, *MediaId, ExternalSourceName);
		return;
	}

	UE_LOG(LogWwiseSimpleExtSrc, Error, TEXT("Did not find media with name %s in MediaNameToId map."), *MediaName);
}

void UWwiseSimpleExtSrcManager::SetExternalSourceMediaWithIds(const int32 ExternalSourceId, const int32 MediaId)
{
	SetExternalSourceMedia(ExternalSourceId, MediaId);
}

#if WITH_EDITORONLY_DATA
//This is called once per external source 
void UWwiseSimpleExtSrcManager::Cook(UWwiseResourceCooker& InResourceCooker, const FWwiseExternalSourceCookedData& InCookedData,
	TFunctionRef<void(const TCHAR* Filename, void* Data, int64 Size)> WriteAdditionalFile,
	const FWwiseSharedPlatformId& InPlatform, const FWwiseSharedLanguageId& InLanguage)
{
	if (LIKELY(bCooked))
	{
		UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("FillExternalSourceToMediaMap: Media already packaged, Skipping media cook."))
			return;
	}
	bCooked = true;

	FString SourceDirectory = InResourceCooker.GetResourceLoader()->GetUnrealGeneratedSoundBanksPath(InPlatform.Platform->ExternalSourceRootPath);

	FString Context = TEXT("Iterating over default media");
	MediaInfoTable->ForeachRow<FWwiseExternalSourceMediaInfo>(Context,
		[this, SourceDirectory, &InResourceCooker, &WriteAdditionalFile](const FName& Key, const FWwiseExternalSourceMediaInfo& MediaInfo)
	{
		InResourceCooker.CookFileToSandbox(SourceDirectory / MediaInfo.MediaName, GetStagingDirectory() / MediaInfo.MediaName, WriteAdditionalFile, true);
	}
	);
}
#endif


void UWwiseSimpleExtSrcManager::LoadExternalSourceMedia(const uint32 InExternalSourceCookie,
	const FString& InExternalSourceName, const FString& InRootPath,
	FLoadExternalSourceCallback&& InCallback)
{
	const uint32* MediaIdPtr = CookieToMediaId.Find(InExternalSourceCookie);
	if (UNLIKELY(!MediaIdPtr))
	{
		UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("LoadExternalSourceMedia: No media has been associated with External Source %" PRIu32 " (%s). No media will be loaded until the media is set."),
			InExternalSourceCookie, *InExternalSourceName);
		InCallback(true);
		return;
	}
	const uint32 MediaId = *MediaIdPtr;

	IncrementFileStateUse(MediaId, EWwiseFileStateOperationOrigin::Loading,
		[this, MediaId, &InRootPath]() mutable -> FWwiseFileStateSharedPtr
	{
		const FName RowName = FName(FString::FromInt(MediaId));
		const FString Context = TEXT("Find media info");
		if (UNLIKELY(!MediaInfoTable.IsValid()))
		{
			UE_LOG(LogWwiseSimpleExtSrc, Error, TEXT("Cannot read External Source Media information because datatable asset has not been loaded."));
			return {};
		}
		else if (const FWwiseExternalSourceMediaInfo* ExternalSourceMediaInfoEntry = MediaInfoTable->FindRow<FWwiseExternalSourceMediaInfo>(RowName, Context))
		{
			return CreateOp(*ExternalSourceMediaInfoEntry, InRootPath);
		}
		else
		{
			UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("LoadExternalSourceMedia : Could not find media info table entry for media id %" PRIu32), MediaId);
			return {};
		}
	}, [InCallback = MoveTemp(InCallback)](const FWwiseFileStateSharedPtr, bool bInResult)
	{
		InCallback(bInResult);
	});
}

void UWwiseSimpleExtSrcManager::UnloadExternalSourceMedia(const uint32 InExternalSourceCookie,
	const FString& InExternalSourceName, const FString& InRootPath,
	FUnloadExternalSourceCallback&& InCallback)
{
	const uint32* MediaIdPtr = CookieToMediaId.Find(InExternalSourceCookie);
	if (UNLIKELY(!MediaIdPtr))
	{
		UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("UnloadExternalSourceMedia: No media has been associated with External Source %" PRIu32 " (%s). No media will be unloaded."),
			InExternalSourceCookie, *InExternalSourceName);
		InCallback();
		return;
	}
	const uint32 MediaId = *MediaIdPtr;

	DecrementFileStateUse(MediaId, nullptr, EWwiseFileStateOperationOrigin::Loading, MoveTemp(InCallback));
}

bool UWwiseSimpleExtSrcManager::GetExternalSourceInfoImpl(AkExternalSourceInfo& OutInfo, uint32 InExternalSourceCookie,
	const FString& InExternalSourceName)
{
	uint32 MediaId;
	if (const auto MediaIdPtr = CookieToMediaId.Find(InExternalSourceCookie))
	{
		MediaId = *MediaIdPtr;
	}
	else
	{
		UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("LoadExternalSource: No media has been associated with External Source %" PRIu32 " (%s)."), InExternalSourceCookie, *InExternalSourceName);
		return false;
	}

	const auto* State = FileStatesById.Find(MediaId);
	if (UNLIKELY(!State || !State->IsValid()))
	{
		UE_LOG(LogWwiseSimpleExtSrc, Verbose, TEXT("Getting external source media %" PRIu32 " (%s) failed"), InExternalSourceCookie, *InExternalSourceName);
		return false;
	}

	auto* ExternalSourceFileState = State->Get()->GetStateAs<FWwiseExternalSourceFileState>();
	if (UNLIKELY(!ExternalSourceFileState))
	{
		UE_LOG(LogWwiseSimpleExtSrc, Fatal, TEXT("Getting external source media %" PRIu32 " (%s): Could not cast to ExternalSourceState"), InExternalSourceCookie, *InExternalSourceName);
		return false;
	}

	if (UNLIKELY(!ExternalSourceFileState->GetExternalSourceInfo(OutInfo)))
	{
		UE_LOG(LogWwiseSimpleExtSrc, Log, TEXT("Getting external source %" PRIu32 " (%s): AkExternalSourceInfo not initialized"), InExternalSourceCookie, *InExternalSourceName);
		return false;
	}
	OutInfo.iExternalSrcCookie = InExternalSourceCookie;
	UE_CLOG(OutInfo.idFile != 0, LogWwiseSimpleExtSrc, VeryVerbose, TEXT("Getting external source %" PRIu32 " (%s): Using file %" PRIu32), InExternalSourceCookie, *InExternalSourceName, OutInfo.idFile);
	UE_CLOG(OutInfo.idFile == 0, LogWwiseSimpleExtSrc, VeryVerbose, TEXT("Getting external source %" PRIu32 " (%s): Using memory file"), InExternalSourceCookie, *InExternalSourceName);
	return true;
}

void UWwiseSimpleExtSrcManager::OnTablesChanged()
{
	if (MediaInfoTable.IsValid())
	{
		if (MediaInfoTable->OnDataTableChanged().IsBoundToObject(this))
		{
			MediaInfoTable->OnDataTableChanged().RemoveAll(this);
		}
	}

	if (ExternalSourceDefaultMedia.IsValid())
	{
		if (ExternalSourceDefaultMedia->OnDataTableChanged().IsBoundToObject(this))
		{
			ExternalSourceDefaultMedia->OnDataTableChanged().RemoveAll(this);
		}
	}

	UE_LOG(LogWwiseSimpleExtSrc, Log, TEXT("Wwise Simple External Source: Change in external source tables settings detected. Reloading external source tables and events."));
	LoadMediaTables();
	ReloadExternalSources();
}

void UWwiseSimpleExtSrcManager::OnMediaInfoTableChanged()
{
	if (!MediaInfoTable.IsValid())
	{
		return;
	}

	UE_LOG(LogWwiseSimpleExtSrc, Log, TEXT("Wwise Simple External Source: Change in MediaInfoTable detected. Media name map will be refreshed and events with external sources will be reloaded."));
	FillMediaNameToIdMap(*MediaInfoTable.Get());
	ReloadExternalSources();
}

void UWwiseSimpleExtSrcManager::OnDefaultExternalSourceTableChanged()
{
	if (!ExternalSourceDefaultMedia.IsValid())
	{
		return;
	}

	UE_LOG(LogWwiseSimpleExtSrc, Log, TEXT("Wwise Simple External Source: Change in ExternalSourceDefaultMedia detected. External source cookie to media Id map will be refreshed and events with external sources will be reloaded."));
	FillExternalSourceToMediaMap(*ExternalSourceDefaultMedia.Get());
	ReloadExternalSources();
}

//It is possible for this to start empty, and for all media mappings to be set in blueprints
void UWwiseSimpleExtSrcManager::FillExternalSourceToMediaMap(const UDataTable& InMappingTable)
{
	if (CookieToMediaId.Num() > 0)
	{
		UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("FillExternalSourceToMediaMap: Emptying external source to media map"));
		CookieToMediaId.Empty();
	}

	FString Context = TEXT("Iterating over default media");
	UE_LOG(LogWwiseSimpleExtSrc, Verbose, TEXT("FillExternalSourceToMediaMap: Filling external source to media map"));

	InMappingTable.ForeachRow<FWwiseExternalSourceCookieDefaultMedia>(Context,
		[this](const FName& Key, const FWwiseExternalSourceCookieDefaultMedia& Value)
		{
			UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("FillExternalSourceToMediaMap : External source %" PRIu32 " (%s) mapped to media %" PRIu32 " (%s)"),
				Value.ExternalSourceCookie, *Value.ExternalSourceName, Value.MediaInfoId, *Value.MediaName);
			CookieToMediaId.Add((uint32)Value.ExternalSourceCookie, Value.MediaInfoId);
		}
	);
}

// This is one way to make setting external source media by name work.
// An alternative approach would be to use a different structure than FWwiseExternalSourceMediaInfo where the media name is the "name" field in the data table (which is used for lookup),
// The media ID could then be generated dynamically using a hashing function such as FAkAudioDevice::GetShortIdFromString.
// In this case, we keep things simple by explicitly stating both the ID and media name in our Media Info Table.
void UWwiseSimpleExtSrcManager::FillMediaNameToIdMap(const UDataTable& InMediaTable)
{
	if (MediaNameToId.Num() > 0)
	{
		UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("FillMediaNameToIdMap: Emptying Media Name To Id map"));
		MediaNameToId.Empty();
	}

	FString Context = TEXT("Iterating over default media");
	UE_LOG(LogWwiseSimpleExtSrc, Verbose, TEXT("FillMediaNameToIdMap: Filling Media Name To Id map"));

	InMediaTable.ForeachRow<FWwiseExternalSourceMediaInfo>(Context,
		[this](const FName& Key, const FWwiseExternalSourceMediaInfo& Value)
		{
			UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("FillMediaNameToIdMap: Adding media entry %" PRIu32 ": %s"),
				Value.ExternalSourceMediaInfoId, *Value.MediaName);

			if (UNLIKELY(MediaNameToId.Contains(Value.MediaName)))
			{
				UE_LOG(LogWwiseSimpleExtSrc, Warning, TEXT("FillMediaNameToIdMap: MediaNameToId already contains entry for %s mapped to ID %" PRIu32 ". It will not be updated."),
					*Value.MediaName, Value.ExternalSourceMediaInfoId);
				return;
			}

			MediaNameToId.Add(Value.MediaName, Value.ExternalSourceMediaInfoId);
		}
	);
}

FWwiseFileStateSharedPtr UWwiseSimpleExtSrcManager::CreateOp(const FWwiseExternalSourceMediaInfo& ExternalSourceMediaInfo, const FString& InRootPath)
{
	if (ExternalSourceMediaInfo.bIsStreamed)
	{
		return FWwiseFileStateSharedPtr(new FWwiseStreamedExternalSourceFileState(
			ExternalSourceMediaInfo.PrefetchSize,
			StreamingGranularity,
			ExternalSourceMediaInfo.ExternalSourceMediaInfoId,
			ExternalSourceMediaInfo.MediaName,
			InRootPath,
			ExternalSourceMediaInfo.CodecID));
	}
	else
	{
		return FWwiseFileStateSharedPtr(new FWwiseInMemoryExternalSourceFileState(
			ExternalSourceMediaInfo.MemoryAlignment,
			ExternalSourceMediaInfo.bUseDeviceMemory,
			ExternalSourceMediaInfo.ExternalSourceMediaInfoId,
			ExternalSourceMediaInfo.MediaName,
			InRootPath,
			ExternalSourceMediaInfo.CodecID));
	}
}

void UWwiseSimpleExtSrcManager::SetExternalSourceMedia(const uint32 ExternalSourceCookie, const uint32 MediaInfoId, const FString& ExternalSourceName)
{
	FileHandlerExecutionQueue.Async([this, ExternalSourceCookie, MediaInfoId, ExternalSourceName]() mutable
	{
		if (!MediaInfoTable.IsValid())
		{
			UE_LOG(LogWwiseSimpleExtSrc, Error, TEXT("Cannot read External Source Media information because datatable asset has not yet been loaded."));
			return;
		}

		FString LogExternalSourceName = ExternalSourceName;
		FName RowName = FName(FString::FromInt(MediaInfoId));
		FString Context = TEXT("Find external source media");
		const FWwiseExternalSourceMediaInfo* ExternalSourceMediaInfo = MediaInfoTable->FindRow<FWwiseExternalSourceMediaInfo>(RowName, Context);
		if (!ExternalSourceMediaInfo)
		{
			UE_LOG(LogWwiseSimpleExtSrc, Error, TEXT("Could not find media entry with id %" PRIu32 " in ExternalSourceMedia datatable."), MediaInfoId);
			return;
		}

		bool bExternalSourceLoaded = false;
		if (ExternalSourceStatesById.Contains(ExternalSourceCookie))
		{
			bExternalSourceLoaded = true;
			auto ExternalSourceCookedData = ExternalSourceStatesById.FindRef(ExternalSourceCookie);
			LogExternalSourceName = ExternalSourceCookedData->DebugName;
		}

		UE_LOG(LogWwiseSimpleExtSrc, Verbose, TEXT("SetExternalSourceMedia: Setting external source %" PRIu32 " (%s) to use media %" PRIu32" (%s)"),
			ExternalSourceCookie, *LogExternalSourceName, MediaInfoId, *ExternalSourceMediaInfo->MediaName);

		if (bExternalSourceLoaded)
		{
			bool bPreviousMediaExists = false;
			bPreviousMediaExists = CookieToMediaId.Contains(ExternalSourceCookie);

			if (bPreviousMediaExists && CookieToMediaId.FindRef(ExternalSourceCookie) == MediaInfoId)
			{
				UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("SetExternalSourceMedia: MediaInfoId for %" PRIu32 " (%s) was already set to %" PRIu32 " (%s). Nothing to do."),
					ExternalSourceCookie, *ExternalSourceName, MediaInfoId, *ExternalSourceMediaInfo->MediaName);
				return;
			}

			if (bPreviousMediaExists)
			{
				UE_LOG(LogWwiseSimpleExtSrc, VeryVerbose, TEXT("SetExternalSourceMedia: Unloading old media for external source %" PRIu32 " (%s)."),
					ExternalSourceCookie, *ExternalSourceName);
				UnloadExternalSourceMedia(ExternalSourceCookie, ExternalSourceName, UWwiseResourceLoader::Get()->GetUnrealExternalSourcePath(), [] {});
			}
		}

		//Update cookie to media map
		CookieToMediaId.Add(ExternalSourceCookie, MediaInfoId);

		//We don't want to load the media if the external source with this cookie is not yet loaded
		if (!bExternalSourceLoaded)
		{
			UE_LOG(LogWwiseSimpleExtSrc, Verbose, TEXT("SetExternalSourceMedia: Media %" PRIu32 " (%s) will be loaded when the external source %" PRIu32 " (%s) is loaded."),
				MediaInfoId, *ExternalSourceMediaInfo->MediaName, ExternalSourceCookie, *ExternalSourceName)
				return;
		}

		//Fire a new media load
		LoadExternalSourceMedia(ExternalSourceCookie, ExternalSourceName, UWwiseResourceLoader::Get()->GetUnrealExternalSourcePath(), [](bool) {});
	});
}
